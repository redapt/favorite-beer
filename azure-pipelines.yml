# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - master
    - feature/*
    - releases/*
    exclude:
    - releases/old*

pr:
  autoCancel: true
  branches:
    include:
    - master
    - feature/*

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '168ae3a2-442f-4990-a32d-307bd419039d'
  imageRepository: 'favoritebeer'
  containerRegistry: 'jmeisnertestaks.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/spa-react-netcore-redis/voting/voting/Dockerfile'
  buildContextPath: '$(Build.SourcesDirectory)/spa-react-netcore-redis/voting'
  helmChartPath: '$(Build.SourcesDirectory)/spa-react-netcore-redis/voting/voting/k8s/Chart'
  valueFilePath: '$(Build.SourcesDirectory)/spa-react-netcore-redis/voting/voting/k8s/Chart/values.yaml'
  aksServiceConnection: 'f93da705-ddd0-43c1-9b08-abeaf2e0546b'
  tag: '$(Build.BuildId)'
  buildVersion: '0.0.0'
  buildVersionMajor: '0'
  buildVersionMinor: '0'
  buildVersionPatch: '0'
  latestTag: '$(Build.SourceBranchName)-latest'
  releaseName: 'demo'
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: GitOps
  condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranchName'], 'master'))
  displayName: Git operations.
  jobs:
  - job: VersionUpdate
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $version = [IO.File]::ReadAllText("VERSION")
          Write-Output "##vso[task.setvariable variable=buildVersion]$version"
          $versionParts = $currentVersion.TrimEnd("*-").Split(".")
          $currentMajor = [Convert]::ToInt32($versionParts[0])
          $currentMinor = [Convert]::ToInt32($versionParts[1])
          $currentPatch = [Convert]::ToInt32($versionParts[2])
          $currentPatch++
          Write-Output "##vso[task.setvariable variable=buildVersionMajor]$currentMajor"
          Write-Output "##vso[task.setvariable variable=buildVersionMinor]$currentMinor"
          Write-Output "##vso[task.setvariable variable=buildVersionPatch]$currentPatch"

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $version = [IO.File]::ReadAllText("VERSION")
          git config --global user.email "system-azure-devops@redapt.com"
          git config --global user.name "System"
          git status
          git add VERSION

          git commit -m "[skip ci] Update version numbers for Build %version%"
          git push origin master

- stage: Build
  condition: and(eq(variables['Build.Reason'], 'PullRequest'), contains(variables['System.PullRequest.SourceBranch'], 'feature'), eq(variables['System.PullRequest.TargetBranch'], 'master'))
  displayName: Build and Push to Dev ACR
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $version = [IO.File]::ReadAllText("VERSION")
          $versionParts = $version.TrimEnd("*-").Split(".")
          $currentMajor = [Convert]::ToInt32($versionParts[0])
          $currentMinor = [Convert]::ToInt32($versionParts[1])
          $currentPatch = [Convert]::ToInt32($versionParts[2])
          Write-Output "##vso[task.setvariable variable=buildVersionMajor]$currentMajor"
          Write-Output "##vso[task.setvariable variable=buildVersionMinor]$currentMinor"
          Write-Output "##vso[task.setvariable variable=buildVersionPatch]$currentPatch"
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        buildContext: $(buildContextPath)
        tags: |
          $(tag)
          $(latestTag)
          $(buildVersionMajor).$(buildVersionMinor).$(buildVersionPatch)

- stage: Deploy
  condition: succeeded('Build')
  displayName: Deploy to Dev Cluster
  jobs:  
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    steps:

    - task: HelmInstaller@1
      displayName: Helm installer
      inputs: 
        helmVersionToInstall: 3.0.2

    - task: HelmDeploy@0
      displayName: Deploy to Demo
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceEndpoint: $(aksServiceConnection)
        command: upgrade
        overrideValues: 'image.repository=$(containerRegistry)/$(imageRepository),image.tag=$(buildVersionMajor).$(buildVersionMinor).$(buildVersionPatch)'
        chartType: FilePath
        chartPath: $(helmChartPath)
        valueFile: $(valueFilePath)
        releaseName: $(releaseName)
        install: true
        failOnStderr: false