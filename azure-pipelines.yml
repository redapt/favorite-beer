# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '168ae3a2-442f-4990-a32d-307bd419039d'
  imageRepository: 'favoritebeer'
  containerRegistry: 'jmeisnertestaks.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/spa-react-netcore-redis/voting/voting/Dockerfile'
  buildContextPath: '$(Build.SourcesDirectory)/spa-react-netcore-redis/voting'
  helmChartPath: '$(Build.SourcesDirectory)/spa-react-netcore-redis/voting/voting/k8s/Chart'
  valueFilePath: '$(Build.SourcesDirectory)/spa-react-netcore-redis/voting/voting/k8s/Chart/values.yaml'
  aksServiceConnection: 'f93da705-ddd0-43c1-9b08-abeaf2e0546b'
  tag: '$(Build.BuildId)'
  latestTag: '$(Build.SourceBranchName)-latest'
  releaseName: 'demo'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        buildContext: $(buildContextPath)
        tags: |
          $(tag)
          $(latestTag)

- stage: Deploy
  displayName: Deploy to Cluster
  jobs:  
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    steps:

    - task: HelmInstaller@1
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      displayName: Helm installer
      inputs: 
        helmVersionToInstall: 3.0.2

    - task: HelmDeploy@0
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      displayName: Deploy to Demo
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceEndpoint: $(aksServiceConnection)
        command: upgrade
        overrideValues: 'image.repository=$(containerRegistry)/$(imageRepository),image.tag=$(tag)'
        chartType: FilePath
        chartPath: $(helmChartPath)
        valueFile: $(valueFilePath)
        releaseName: $(releaseName)
        install: true
        failOnStderr: false