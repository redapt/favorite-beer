def buildCompleted = false

def isMergeCommit(String commit) {
  isSimpleCommit = sh(returnStdout: true,
      script: "set +e; git rev-parse --verify -q $commit^2 > /dev/null; echo \$?").trim()
  return isSimpleCommit == "0"
}

pipeline {
    agent {
        kubernetes {
            label 'kaniko'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: kaniko
spec:
  serviceAccountName: jenkins-sa-agent
  containers:
  - name: jnlp
    image: 'docker.io/jenkins/inbound-agent:4.3-4-alpine'
    args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
  - name: kaniko
    image: 771502366784.dkr.ecr.us-east-2.amazonaws.com/kaniko:latest
    imagePullPolicy: Always
    command:
    - /busybox/cat
    tty: true
  - name: tools
    image: argoproj/argo-cd-ci-builder:v1.0.0
    command:
    - cat
    tty: true
  restartPolicy: Never
"""
        }
    }
    stages {
        stage('Skip CI Check') {
            when {
                not {
                    changelog '\\[skip ci\\]'
                }
            }
            stages {
                stage('Build Image') {
                    when {
                        anyOf {
                            allOf { 
                                changeRequest target: 'master'
                                anyOf {
                                   changeRequest branch: 'hotfix/.*', comparator: 'REGEXP'
                                }
                            }
                            allOf { 
                                not {
                                    changeRequest()
                                }
                                branch 'release'
                            }
                            allOf { 
                                not {
                                    changeRequest()
                                }
                                branch 'develop'
                            }
                        }
                    }
                    environment {
                        DOCKERFILE      = "Dockerfile"
                        CONTEXT         = "./spa-react-netcore-redis/voting"
                        REGISTRY        = '771502366784.dkr.ecr.us-east-2.amazonaws.com'
                        IMAGE           = 'favorite-beer'
                        LATEST_TAG      = 'latest'
                        TAG             = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
                        VERSION         = sh(script: 'cat VERSION', returnStdout: true).trim()
                        VERSION_SUFFIX  = sh(script: 'if [[ -z "${CHANGE_BRANCH}" ]]; then echo -n ${BRANCH_NAME}; else echo -n ${CHANGE_BRANCH}; fi;', returnStdout: true).trim()
                        VERSION_ALT     = "${VERSION}-${VERSION_SUFFIX}${BUILD_NUMBER}"
                    }
                    steps {
                        //container('tools'){
                        //    sh "wget https://github.com/mikefarah/yq/releases/download/v4.9.6/yq_linux_amd64.tar.gz"
                        //    sh "tar xvf yq_linux_amd64.tar.gz"
                        //    sh "mv yq_linux_amd64 /usr/bin/yq"
                        //
                        //    sh "chmod +x ./jenkins/scripts/bump_release_version.sh"
                        //    sh "./jenkins/scripts/bump_release_version.sh"
                        //    
                        //}
                        container(name: 'kaniko', shell: '/busybox/sh') {   
                            script {
                                try {
                                    sh '''#!/busybox/sh
                                    /kaniko/executor \
                                    --context=dir://${CONTEXT} \
                                    --dockerfile=${DOCKERFILE} \
                                    --destination=${REGISTRY}/${IMAGE}:${TAG} \
                                    --destination=${REGISTRY}/${IMAGE}:${VERSION}-${VERSION_SUFFIX} \
                                    --destination=${REGISTRY}/${IMAGE}:${VERSION_ALT} \
                                    --destination=${REGISTRY}/${IMAGE}:${LATEST_TAG}
                                    '''
                                    buildCompleted = true
                                } catch (Exception e) {
                                    buildCompleted = false
                                }
                            }
                        }
                    }
                }

                stage('Deploy: Dev') {
                    when {
                        allOf { 
                            not {
                                changeRequest()
                            }
                            branch 'develop'
                        }
                    }
                    environment {
                        REGISTRY        = '771502366784.dkr.ecr.us-east-2.amazonaws.com'
                        IMAGE           = 'favorite-beer'
                        LATEST_TAG      = 'latest'
                        VERSION         = sh(script: 'cat VERSION', returnStdout: true).trim()
                        VERSION_SUFFIX  = sh(script: 'echo -n ${BRANCH_NAME}', returnStdout: true).trim()
                    }
                    steps {
                        container('tools'){               
                            echo "Deploy ${REGISTRY}/${IMAGE}:${VERSION}-${VERSION_SUFFIX}${BUILD_NUMBER} to Dev Environment"
                        }
                    }
                }

                stage('Deploy: Test') {
                    when {
                        anyOf {
                            allOf { 
                                not {
                                    changeRequest()
                                }
                                branch 'release'
                            }
                            allOf { 
                                changeRequest target: 'master'
                                anyOf {
                                   changeRequest branch: 'hotfix/.*', comparator: 'REGEXP'
                                }
                            }
                        }
                    }
                    environment {
                        REGISTRY        = '771502366784.dkr.ecr.us-east-2.amazonaws.com'
                        IMAGE           = 'favorite-beer'
                        LATEST_TAG      = 'latest'
                        VERSION         = sh(script: 'cat VERSION', returnStdout: true).trim()
                        VERSION_SUFFIX  = sh(script: 'if [[ -z "${CHANGE_BRANCH}" ]]; then echo -n ${BRANCH_NAME}; else echo -n ${CHANGE_BRANCH}; fi;', returnStdout: true).trim()
                    }
                    steps {
                        container('tools'){               
                            echo "Deploy ${REGISTRY}/${IMAGE}:${VERSION}-${VERSION_SUFFIX}${BUILD_NUMBER} to Test Environment"
                        }
                    }
                }

                stage('Tag Release Candidate') {
                    when {
                        allOf { 
                            changeRequest target: 'master'
                            anyOf {
                               changeRequest branch: 'release', comparator: 'REGEXP'
                            }
                        }
                    }
                    environment {
                        REGISTRY        = '771502366784.dkr.ecr.us-east-2.amazonaws.com'
                        IMAGE           = 'favorite-beer'
                        LATEST_TAG      = 'latest'
                        VERSION         = sh(script: 'cat VERSION', returnStdout: true).trim()
                        VERSION_SUFFIX  = sh(script: 'if [[ -z "${CHANGE_BRANCH}" ]]; then echo -n ${BRANCH_NAME}; else echo -n ${CHANGE_BRANCH}; fi;', returnStdout: true).trim()
                    }
                    steps {
                        container('tools'){               
                            echo "Tag Release Candidate Version: ${VERSION}-${VERSION_SUFFIX}${BUILD_NUMBER}"
                        }
                    }
                }  

                stage('Tag Hotfix') {
                    when {
                        allOf { 
                            changeRequest target: 'master'
                            anyOf {
                               changeRequest branch: 'hotfix/.*', comparator: 'REGEXP'
                            }
                        }
                    }
                    environment {
                        REGISTRY        = '771502366784.dkr.ecr.us-east-2.amazonaws.com'
                        IMAGE           = 'favorite-beer'
                        LATEST_TAG      = 'latest'
                        VERSION         = sh(script: 'cat VERSION', returnStdout: true).trim()
                        VERSION_SUFFIX  = sh(script: 'if [[ -z "${CHANGE_BRANCH}" ]]; then echo -n ${BRANCH_NAME}; else echo -n ${CHANGE_BRANCH}; fi;', returnStdout: true).trim()
                    }
                    steps {
                        container('tools'){               
                            echo "Tag Hotfix Version: ${VERSION}-${VERSION_SUFFIX}${BUILD_NUMBER}"
                        }
                    }
                }  

                stage('Deploy: Prod') {
                    when {
                        allOf { 
                            not {
                                changeRequest()
                            }
                            branch 'master'
                        }
                    }
                    environment {
                        REGISTRY        = '771502366784.dkr.ecr.us-east-2.amazonaws.com'
                        IMAGE           = 'favorite-beer'
                        LATEST_TAG      = 'latest'
                        VERSION         = sh(script: 'cat VERSION', returnStdout: true).trim()
                    }
                    steps {
                        container('tools'){               
                            echo "Promote ${REGISTRY}/${IMAGE}:${VERSION} to Prod Registry"
                            echo "Deploy ${IMAGE}:${VERSION} to Prod Environment"
                            echo "Down-Merge Master into Release, bump Release version no suffix [skip ci]"

                        }
                    }
                }
            }
        }
    }
}