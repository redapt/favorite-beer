def buildCompleted = false

def isMergeCommit(String commit) {
  isSimpleCommit = sh(returnStdout: true,
      script: "set +e; git rev-parse --verify -q $commit^2 > /dev/null; echo \$?").trim()
  return isSimpleCommit == "0"
}

def buildSuffix(String branch, String version) {
  if(branch == "develop"){
    if(version =~ /.*-dev/){
        return ""
    }
    return "-dev"
  }
  if(branch == "release"){
    if(version =~ /.*-rc/){
        return ""
    }
    return "-rc"
  }
  if("${branch}" =~ /hotfix.*/){
    if(version =~ /.*-hotfix/){
        return ""
    }
    return "-hotfix"
  }
  return ""
}

pipeline {

    parameters {
        string(name: 'AGENT_REGISTRY', defaultValue: '771502366784.dkr.ecr.us-east-2.amazonaws.com', 
               description: 'What ECR does jenkins have access to for non production? ex: 771502366784.dkr.ecr.us-east-2.amazonaws.com [Note: expecting jenkins-inbound-agent:4.3-4-alpine, kaniko:debug, argo-cd-ci-builder:v1.0.0, and podman-aws:latest to exist within this repository.]')
        
        string(name: 'REGISTRY', defaultValue: '771502366784.dkr.ecr.us-east-2.amazonaws.com', description: 'What ECR does jenkins have access to for non production? ex: 771502366784.dkr.ecr.us-east-2.amazonaws.com')

        string(name: 'IMAGE', defaultValue: 'favorite-beer', description: 'What should the built/deployed image be called? ex: favorite-beer')

        string(name: 'LATEST_TAG', defaultValue: 'latest', description: 'Do you want to override the latest tag? default: latest')

        string(name: 'GIT_USER_EMAIL', defaultValue: 'no-reply@redapt.com', description: 'What email should be used when writing to github? default: no-reply@redapt.com')

        string(name: 'GIT_USER_FULL_NAME', defaultValue: 'Jenkins', description: 'What is the name of the user, when writing to github? default: Jenkins')
    }

    agent {
        kubernetes {
            label 'jenkins-build-agent'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-build-agent
spec:
  serviceAccountName: jenkins-sa-agent
  containers:
  - name: jnlp
    image: ${params.AGENT_REGISTRY}/jenkins-inbound-agent:4.3-4-alpine
    args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
  - name: kaniko
    image: ${params.AGENT_REGISTRY}/kaniko:debug
    imagePullPolicy: Always
    command:
    - /busybox/cat
    tty: true
  - name: argo-cd-ci-builder
    image: ${params.AGENT_REGISTRY}/argo-cd-ci-builder:v1.0.0
    command:
    - cat
    tty: true
  - name: podman-aws
    image: ${params.AGENT_REGISTRY}/podman-aws:latest
    imagePullPolicy: Always
    command:
    - cat
    securityContext:
      runAsUser: 0
      capabilities:
        add:
          - "SYS_ADMIN"
          - "MKNOD"
          - "SYS_CHROOT"
          - "SETFCAP"
    tty: true

  restartPolicy: Never
"""
        }
    }
    stages {

        stage('CICD') {
            when {
                anyOf {
                    expression {
                        isMergeCommit(env.GIT_COMMIT)
                    }
                    not {
                        changelog '\\[skip ci\\]'
                    }
                }
            }
            environment {
                DOCKERFILE        = "Dockerfile"
                CONTEXT           = "./spa-react-netcore-redis/voting"
                TAG               = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
                REGISTRY          = "${params.REGISTRY}"
                IMAGE             = "${params.IMAGE}"
                VERSION           = sh(script: './jenkins/scripts/nextver.sh current-no-suffix', returnStdout: true).trim()
                LATEST_TAG        = "${params.LATEST_TAG}"
                VERSION_BRANCH    = sh(script: 'echo ${CHANGE_BRANCH:=$BRANCH_NAME}', returnStdout: true).trim()
                VERSION_SUFFIX    = buildSuffix("${VERSION_BRANCH}", "${VERSION}")
                VERSION_CANDIDATE = "${VERSION}${VERSION_SUFFIX}"
                VERSION_BUILD     = "${VERSION_CANDIDATE}-${BUILD_NUMBER}"
            }
            stages {

                stage('Pod Man Testing') {
                    steps {
                        container(name: 'podman-aws') {   
                            script {
                                sh 'podman --version'
                                sh 'aws --version'
                                sh '''
                                    aws ecr get-login-password --region us-east-2 | \
                                      podman --storage-driver=vfs --runroot /home/jenkins/ --root /home/jenkins login \
                                        --username AWS \
                                        --password-stdin \
                                        ${REGISTRY}

                                    podman --runroot /home/jenkins/ --root /home/jenkins pull ${REGISTRY}/${IMAGE}:${LATEST_TAG}
                                '''
                            }
                        }
                    }
                }

                stage('Build Image') {
                    when {
                        anyOf {
                            allOf { 
                                changeRequest target: 'master'
                                changeRequest branch: 'hotfix/.*', comparator: 'REGEXP'
                            }
                            allOf { 
                                not {
                                    changeRequest()
                                }
                                branch 'release'
                            }
                            allOf { 
                                not {
                                    changeRequest()
                                }
                                branch 'develop'
                            }
                        }
                    }
                    steps {
                        //container('argo-cd-ci-builder'){
                        //    sh "wget https://github.com/mikefarah/yq/releases/download/v4.9.6/yq_linux_amd64.tar.gz"
                        //    sh "tar xvf yq_linux_amd64.tar.gz"
                        //    sh "mv yq_linux_amd64 /usr/bin/yq"                        
                        //}

                        container(name: 'kaniko', shell: '/busybox/sh') {   
                            script {
                                try {
                                    sh '''#!/busybox/sh
                                    /kaniko/executor \
                                    --context=dir://${CONTEXT} \
                                    --dockerfile=${DOCKERFILE} \
                                    --destination=${REGISTRY}/${IMAGE}:${TAG} \
                                    --destination=${REGISTRY}/${IMAGE}:${VERSION_CANDIDATE} \
                                    --destination=${REGISTRY}/${IMAGE}:${VERSION_BUILD} \
                                    --destination=${REGISTRY}/${IMAGE}:${LATEST_TAG}
                                    '''
                                    buildCompleted = true
                                } catch (Exception e) {
                                    buildCompleted = false
                                }
                            }
                        }
                    }
                }

                stage('Deploy: Dev') {
                    when {
                        allOf { 
                            not {
                                changeRequest()
                            }
                            branch 'develop'
                        }
                    }
                    steps {
                        container('argo-cd-ci-builder'){           
                            script {     
                                if(buildCompleted){
                                    echo "Deploy ${REGISTRY}/${IMAGE}:${VERSION_BUILD} to Dev Environment"
                                }
                            }
                        }
                    }
                }

                stage('Deploy: Test') {
                    when {
                        anyOf {
                            allOf { 
                                not {
                                    changeRequest()
                                }
                                branch 'release'
                            }
                        }
                    }
                    steps {
                        container('argo-cd-ci-builder'){               
                            script {     
                                if(buildCompleted){
                                    echo "Deploy ${REGISTRY}/${IMAGE}:${VERSION_BUILD} to Test Environment"
                                }
                            }
                        }
                    }
                }

                stage('VERSION Commit') {
                    when {
                        anyOf {
                            allOf { 
                                not {
                                    changeRequest()
                                }
                                branch 'release'
                            }
                            allOf { 
                                changeRequest target: 'master'
                                anyOf {
                                   changeRequest branch: 'hotfix/.*', comparator: 'REGEXP'
                                }
                            }
                        }
                    }
                    steps {

                        container('argo-cd-ci-builder'){               
                            echo "Tag Source Branch ${VERSION_BRANCH} and Set Version: ${VERSION_CANDIDATE} [skip ci]"
                            script {
                                if("${VERSION_CANDIDATE}" != "${VERSION}"){
                                    withCredentials([usernamePassword(credentialsId: 'jenkins-gh-user', usernameVariable: 'USERNAME', passwordVariable: 'PAT')]) {
                                        sh "git config --global user.email \"${params.GIT_USER_EMAIL}\""
                                        sh "git config --global user.name \"${params.GIT_USER_FULL_NAME}\""
                                        sh "git remote set-url origin https://$PAT@github.com/redapt/favorite-beer.git"
                                        sh "git fetch origin ${VERSION_BRANCH}"
                                        sh "git checkout ${VERSION_BRANCH}"

                                        sh "echo ${VERSION_CANDIDATE} > VERSION"
                                        sh "git add VERSION"
                                        sh "git commit -m \"[skip ci] Bump version to ${VERSION_CANDIDATE}\""
                                        sh "git push origin ${VERSION_BRANCH}"
                                    }
                                }
                            }
                        }
                    }
                }  

                // Have an awkward state when release PR to master is updated, need to reconcile the version on Release, 
                // BEFORE taking action on the PR. If/when I skip ci the version set after the build, the pull request would already have 
                // been triggered by the additional commit to an open PR.. (May need a rule to close PR to master, if it needs more code.)
                stage('Deploy: Stage') {
                    when {
                        anyOf {
                            allOf { 
                                changeRequest target: 'master'
                                anyOf {
                                   changeRequest branch: 'hotfix/.*', comparator: 'REGEXP'
                                   changeRequest branch: 'release', comparator: 'REGEXP'
                                }
                            }
                        }
                    }
                    steps {
                        container('argo-cd-ci-builder'){             
                            script {     
                                if(buildCompleted){
                                    echo "Deploy ${REGISTRY}/${IMAGE}:${VERSION_CANDIDATE} as ${REGISTRY}/${IMAGE}:${VERSION_CANDIDATE}-${BRANCH_NAME}-${BUILD_NUMBER} to Stage Environment"
                                } else if(env.CHANGE_BRANCH == 'release') {
                                    echo "AFTER BUILD if PR was already OPEN, Deploy ${REGISTRY}/${IMAGE}:${VERSION_CANDIDATE} as ${REGISTRY}/${IMAGE}:${VERSION_CANDIDATE}-${BRANCH_NAME}-${BUILD_NUMBER} to Stage Environment"
                                }
                            }
                        }
                    }
                }

                stage('Deploy: Prod') {
                    when {
                        allOf { 
                            not {
                                changeRequest()
                            }
                            branch 'master'
                        }
                    }
                    environment {
                        VERSION_CANDIDATE = sh(script: './jenkins/scripts/nextver.sh current', returnStdout: true).trim()
                        NEXT_VERSION           = sh(script: './jenkins/scripts/nextver.sh patch-no-suffix', returnStdout: true).trim()
                    }
                    steps {
                        container('argo-cd-ci-builder'){      
                            echo "Promote ${REGISTRY}/${IMAGE}:${VERSION_CANDIDATE} as ${IMAGE}:${VERSION} to Production Registry"           
                            echo "Deploy ${IMAGE}:${VERSION} to Prod Environment"
                            
                            //echo "Down-Merge Master into Release, THEN bump Release version no suffix [skip ci]"
                            withCredentials([usernamePassword(credentialsId: 'jenkins-gh-user', usernameVariable: 'USERNAME', passwordVariable: 'PAT')]) {
                                sh "git config --global user.email \"${params.GIT_USER_EMAIL}\""
                                sh "git config --global user.name \"${params.GIT_USER_FULL_NAME}\""

                                sh "git remote set-url origin https://$PAT@github.com/redapt/favorite-beer.git"
                                sh "git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'"
                                sh "git fetch origin release"
                                sh "git fetch origin develop"

                                sh "git checkout ${VERSION_BRANCH}"
                                sh "echo -n ${VERSION} > VERSION"
                                sh "git add VERSION"

                                sh "git commit -m \"[skip ci] Tag and set master to ${VERSION}\""
                                sh "git tag $VERSION"
                                sh "git push origin ${VERSION_BRANCH} --tags"

                                sh "git checkout release"
                                sh "git merge master"
                                sh "echo -n ${NEXT_VERSION} > VERSION"
                                sh "git add VERSION"
                                sh "git commit --allow-empty -m \"[skip ci] Set release to ${NEXT_VERSION}\""
                                sh "git push origin release"

                                sh "git checkout develop"
                                sh "git merge release"
                                sh "git commit --allow-empty -m \"[skip ci] Set develop to ${NEXT_VERSION}\""
                                sh "git push origin develop"
                            }

                        }
                    }
                }
            }
        }

    }
}